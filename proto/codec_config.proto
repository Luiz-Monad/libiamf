syntax = "proto2";

package libiamf_proto;

// Valid proto enums start at index 1, which are different from the
// corresponding enums in C, e.g. kLpcmBigEndian = 0.
enum LpcmFormatFlags {
  LPCM_INVALID = 0;
  LPCM_BIG_ENDIAN = 1;
  LPCM_LITTLE_ENDIAN = 2;
}

message DecoderConfigLpcm {
  optional LpcmFormatFlags sample_format_flags = 1;
  optional uint32 sample_size = 2;
  optional uint32 sample_rate = 3;
}

enum OpusApplicationFlag {
  APPLICATION_INVALID = 0;
  APPLICATION_VOIP = 1;
  APPLICATION_AUDIO = 2;
  APPLICATION_RESTRICTED_LOWDELAY = 3;
}

// Settings to configure `libopus`.
message OpusEncoderMetadata {
  optional int32 target_bitrate = 1;
  optional OpusApplicationFlag application = 2;
}

message DecoderConfigOpus {
  optional uint32 version = 1;
  optional uint32 output_channel_count = 2;
  optional uint32 pre_skip = 3;
  optional uint32 input_sample_rate = 4;
  optional int32 output_gain = 5;
  optional uint32 mapping_family = 6;
  optional OpusEncoderMetadata opus_encoder_metadata = 7;
}

message DecoderConfigAac {}

enum FlacBlockType {
  FLAC_BLOCK_TYPE_INVALID = 0;
  FLAC_BLOCK_TYPE_STREAMINFO = 1;
  FLAC_BLOCK_TYPE_PADDING = 2;
  FLAC_BLOCK_TYPE_APPLICATION = 3;
  FLAC_BLOCK_TYPE_SEEKTABLE = 4;
  FLAC_BLOCK_TYPE_VORBIS_COMMENT = 5;
  FLAC_BLOCK_TYPE_CUESHEET = 6;
  FLAC_BLOCK_TYPE_PICTURE = 7;
}

message FlacMetaBlockHeader {
  optional bool last_metadata_block_flag = 1;
  optional FlacBlockType block_type = 2;
  optional uint32 metadata_data_block_length = 3;
}

message FlacMetaBlockStreamInfo {
  optional uint32 minimum_block_size = 1;
  optional uint32 maximum_block_size = 2;
  optional uint32 minimum_frame_size = 3;
  optional uint32 maximum_frame_size = 4;
  optional uint32 sample_rate = 5;
  optional uint32 number_of_channels = 6;
  optional uint32 bits_per_sample = 7;
  optional uint64 total_samples_in_stream = 8;
  optional bytes md5_signature = 9;
}

// Settings to configure `libflac`.
message FlacEncoderMetadata {
  optional uint32 compression_level = 1;
}

message FlacMetaBlock {
  optional FlacMetaBlockHeader header = 1;
  oneof data {
    FlacMetaBlockStreamInfo stream_info = 2;
    bytes generic_block = 3;
  }
}

message DecoderConfigFlac {
  repeated FlacMetaBlock metadata_blocks = 3;
  optional FlacEncoderMetadata flac_encoder_metadata = 4;
}

message CodecConfig {
  optional uint32 codec_id = 1;
  optional uint32 num_samples_per_frame = 2;
  reserved 3;
  optional int32 audio_roll_distance = 9;
  oneof decoder_config {
    DecoderConfigLpcm decoder_config_lpcm = 5;
    DecoderConfigOpus decoder_config_opus = 6;
    DecoderConfigAac decoder_config_aac = 7;
    DecoderConfigFlac decoder_config_flac = 8;
  }
}

message CodecConfigObuMetadata {
  optional uint32 codec_config_id = 1;
  optional CodecConfig codec_config = 2;
}
